{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      url,\n      headers\n    } = _ref;\n    this._url = url;\n    this._headers = headers;\n  }\n  _checkRes(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  // Карточки должны отображаться на странице только после получения id пользователя\n  proceedFromServer() {\n    return Promise.all([this.getInitialCards(), this.getUserObj()]);\n  }\n  getUserObj() {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n\n  // Загрузка карточек \n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n  changeUserObj(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    }).then(this._checkRes);\n  }\n  createCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(data)\n    }).then(this._checkRes);\n  }\n  deleteCard(id) {\n    return fetch(`${this._url}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkRes);\n  }\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._url}/cards/${id}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(this._checkRes);\n    } else {\n      return fetch(`${this._url}/cards/${id}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(this._checkRes);\n    }\n  }\n  changeAvatar(avatar) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(avatar)\n    }).then(this._checkRes);\n  }\n}\nexport const api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-59/',\n  headers: {\n    authorization: '04fe2fa3-c86b-49c0-922d-ad413859efcc',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","_ref","url","headers","_url","_headers","_checkRes","res","ok","json","Promise","reject","status","proceedFromServer","all","getInitialCards","getUserObj","fetch","then","changeUserObj","data","method","body","JSON","stringify","createCard","deleteCard","id","changeLikeCardStatus","isLiked","changeAvatar","avatar","api","authorization"],"sources":["C:/Users/Huawei/Desktop/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\r\n  constructor({ url, headers }) {\r\n    this._url = url\r\n    this._headers = headers\r\n  }\r\n\r\n  _checkRes(res) {\r\n    if (res.ok) {\r\n      return res.json()\r\n    } else {\r\n      return Promise.reject(`Ошибка: ${res.status}`)\r\n    }\r\n  }\r\n\r\n  // Карточки должны отображаться на странице только после получения id пользователя\r\n  proceedFromServer() {\r\n    return Promise.all([this.getInitialCards(), this.getUserObj()])\r\n  }\r\n\r\n  getUserObj() {\r\n    return fetch(`${this._url}/users/me`, {\r\n      headers: this._headers,\r\n    }).then(this._checkRes)\r\n  }\r\n\r\n  // Загрузка карточек \r\n  getInitialCards() {\r\n    return fetch(`${this._url}/cards`, {\r\n      headers: this._headers,\r\n    }).then(this._checkRes)\r\n  }\r\n\r\n\r\n  changeUserObj(data) {\r\n    return fetch(`${this._url}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify(data),\r\n    }).then(this._checkRes)\r\n  }\r\n\r\n  createCard(data) {\r\n    return fetch(`${this._url}/cards`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify(data),\r\n    }).then(this._checkRes)\r\n  }\r\n\r\n  \r\n  deleteCard(id) {\r\n    return fetch(`${this._url}/cards/${id}`, {\r\n      method: 'DELETE',\r\n      headers: this._headers,\r\n    }).then(this._checkRes)\r\n  }\r\n\r\n  changeLikeCardStatus(id, isLiked) {\r\n    if (isLiked) {\r\n      return fetch(`${this._url}/cards/${id}/likes`, {\r\n        method: 'PUT',\r\n        headers: this._headers,\r\n      }).then(this._checkRes)\r\n    } else {\r\n      return fetch(`${this._url}/cards/${id}/likes`, {\r\n        method: 'DELETE',\r\n        headers: this._headers,\r\n      }).then(this._checkRes)\r\n    }\r\n  }\r\n\r\n  changeAvatar(avatar) {\r\n    return fetch(`${this._url}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify(avatar),\r\n    }).then(this._checkRes)\r\n  }\r\n}\r\n\r\nexport const api = new Api({\r\n  url: 'https://mesto.nomoreparties.co/v1/cohort-59/',\r\n  headers: {\r\n    authorization: '04fe2fa3-c86b-49c0-922d-ad413859efcc',\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}