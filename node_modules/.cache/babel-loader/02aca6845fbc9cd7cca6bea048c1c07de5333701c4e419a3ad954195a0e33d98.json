{"ast":null,"code":"export const BASE_URL = \"https://auth.nomoreparties.co\"; //получаем базовый адрес \n\nclass Auth {\n  constructor(_ref) {\n    let {\n      url\n    } = _ref;\n    //роут для регистрации пользователя;\n    this.signUp = (email, password) => {\n      return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      }).then(res => {\n        return this.checkRes(res);\n      });\n    };\n    // роут для авторизации пользователя.\n    this.signIn = (email, password) => {\n      return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      }).then(res => {\n        return this.checkRes(res);\n      });\n    };\n    //проверяем токен\n    this.checkToken = token => {\n      return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        }\n      }).then(res => {\n        return this.checkRes(res);\n      });\n    };\n    this._url = url;\n  }\n  checkRes(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n}\nexport const auth = new Auth({\n  BASE_URL\n});","map":{"version":3,"names":["BASE_URL","Auth","constructor","_ref","url","signUp","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","res","checkRes","signIn","checkToken","token","Authorization","_url","ok","json","Promise","reject","status","auth"],"sources":["C:/Users/Huawei/Desktop/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL =\"https://auth.nomoreparties.co\" //получаем базовый адрес \r\n\r\nclass Auth {\r\n  constructor({ url }) {\r\n    this._url = url\r\n  }\r\n\r\n  checkRes(res) {\r\n    if (res.ok) {\r\n      return res.json()\r\n    } else {\r\n      return Promise.reject(`Ошибка: ${res.status}`)\r\n    }\r\n  }\r\n//роут для регистрации пользователя;\r\n  signUp = (email, password) => {\r\n    return fetch(`${BASE_URL}/signup`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    }).then((res) => {\r\n      return this.checkRes(res)\r\n    })\r\n  }\r\n// роут для авторизации пользователя.\r\n  signIn = (email, password) => {\r\n    return fetch(`${BASE_URL}/signin`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    }).then((res) => {\r\n      return this.checkRes(res)\r\n    })\r\n  }\r\n//проверяем токен\r\n  checkToken = (token) => {\r\n    return fetch(`${BASE_URL}/users/me`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    }).then((res) => {\r\n      return this.checkRes(res)\r\n    })\r\n  }\r\n}\r\n\r\nexport const auth = new Auth({ BASE_URL })\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAE,+BAA+B,EAAC;;AAEvD,MAAMC,IAAI,CAAC;EACTC,WAAWA,CAAAC,IAAA,EAAU;IAAA,IAAT;MAAEC;IAAI,CAAC,GAAAD,IAAA;IAWrB;IAAA,KACEE,MAAM,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;MAC5B,OAAOC,KAAK,CAAE,GAAER,QAAS,SAAQ,EAAE;QACjCS,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACPC,MAAM,EAAE,kBAAkB;UAC1B,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC,CAACQ,IAAI,CAAEC,GAAG,IAAK;QACf,OAAO,IAAI,CAACC,QAAQ,CAACD,GAAG,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC;IACH;IAAA,KACEE,MAAM,GAAG,CAACZ,KAAK,EAAEC,QAAQ,KAAK;MAC5B,OAAOC,KAAK,CAAE,GAAER,QAAS,SAAQ,EAAE;QACjCS,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACPC,MAAM,EAAE,kBAAkB;UAC1B,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC,CAACQ,IAAI,CAAEC,GAAG,IAAK;QACf,OAAO,IAAI,CAACC,QAAQ,CAACD,GAAG,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC;IACH;IAAA,KACEG,UAAU,GAAIC,KAAK,IAAK;MACtB,OAAOZ,KAAK,CAAE,GAAER,QAAS,WAAU,EAAE;QACnCS,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPC,MAAM,EAAE,kBAAkB;UAC1B,cAAc,EAAE,kBAAkB;UAClCU,aAAa,EAAG,UAASD,KAAM;QACjC;MACF,CAAC,CAAC,CAACL,IAAI,CAAEC,GAAG,IAAK;QACf,OAAO,IAAI,CAACC,QAAQ,CAACD,GAAG,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC;IAhDC,IAAI,CAACM,IAAI,GAAGlB,GAAG;EACjB;EAEAa,QAAQA,CAACD,GAAG,EAAE;IACZ,IAAIA,GAAG,CAACO,EAAE,EAAE;MACV,OAAOP,GAAG,CAACQ,IAAI,EAAE;IACnB,CAAC,MAAM;MACL,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUV,GAAG,CAACW,MAAO,EAAC,CAAC;IAChD;EACF;AAwCF;AAEA,OAAO,MAAMC,IAAI,GAAG,IAAI3B,IAAI,CAAC;EAAED;AAAS,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}